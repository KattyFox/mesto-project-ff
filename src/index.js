import './pages/index.css';
import './components/card.js';
import './components/modal.js';
import './components/validation.js';

import {createCard} from "./components/card.js"
import { setSubmitButtonState,  closePopup, openPopup } from "./components/modal.js";
import { initialCards } from "./scripts/cards.js";

import { enableValidation, clearValidation } from "./components/validation.js";

import { getMe,getCards } from './components/api.js';

(function () {
// –ø–æ–∏—Å–∫ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 
const placesList = document.querySelector(".places__list");
const editForm = document.forms['edit-profile'];
const editPopup = document.querySelector('.popup_type_edit');
const nameInput = editForm.elements.name;
const jobInput = editForm.elements.description;
const profileTitle = document.querySelector(".profile__title");
const profileAvatar = document.querySelector(".profile__image")
const profileDescription = document.querySelector(".profile__description");
const newCardForm = document.forms['new-place']; // getting form by name
const placeName = newCardForm.elements['place-name']; // getting form elements
const newCardImageLink = newCardForm.elements.link;
const submitProfileButton = newCardForm.querySelector('.popup__button');
const addNewCardButton = document.querySelector('.profile__add-button');
const editButton = document.querySelector('.profile__edit-button');
const newCardPopup = document.querySelector('.popup_type_new-card');

const validationConfig = {
  formSelector: '.popup__form',
  inputSelector: '.popup__input',
  submitButtonSelector: '.popup__button',
  inactiveButtonClass: 'popup__button_disabled',
  inputErrorClass: 'popup__input_type_error',
  errorClass: 'popup__error_visible'
}


// –ü–æ–ø–∞–ø—ã –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã + –ø—Ä–æ–≤–µ—Ä–∫–∞
const imagePopup = document.querySelector(".popup_type_image");
let popupImage, popupCaption;
  if (imagePopup) {
    popupImage = imagePopup.querySelector(".popup__image");
    popupCaption = imagePopup.querySelector(".popup__caption");
  }


// FUNCTION ADDING CARD
function addCard(nameValue, linkValue, placesList) {
  placesList.prepend(createCard({
    name: nameValue,
    link: linkValue
  }));
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ submit
editForm.addEventListener('submit', function(evt) {
  evt.preventDefault();

  // NEW Data
  profileTitle.textContent = nameInput.value;
  profileDescription.textContent = jobInput.value;

  closePopup(editPopup);
});


// Button EDDTING
editButton.addEventListener('click', ()=>{

  // CURRENT data of progile
  nameInput.value = profileTitle.textContent;
  jobInput.value = profileDescription.textContent;

  // –í–ê–ª–∏–¥–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  setSubmitButtonState(editForm.querySelector(".popup__button"), submitProfileButton);
  openPopup(editPopup);
});


newCardPopup
  .querySelector(".popup__close")
  .addEventListener("click", function () {
    closePopup(newCardPopup);
  });


// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
newCardForm.addEventListener("submit", function (evt) {
  evt.preventDefault();
  addCard(placeName.value, newCardImageLink.value, placesList);
  newCardForm.reset();
  closePopup(newCardPopup);
  setSubmitButtonState(false, submitProfileButton);
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
newCardForm.addEventListener("input", function () {
  const isValid = placeName.value.length > 0 && newCardImageLink.value.length > 0;
  setSubmitButtonState(isValid, submitProfileButton);

});


// —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ (—Ä–µ–¥ –ø—Ä–æ—Ñ-–ª—å)
addNewCardButton.addEventListener("click", function () {
  openPopup(newCardPopup);
  clearValidation(newCardPopup, validationConfig);
});


// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ 6 –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
initialCards.forEach((cardData) => {
  const cardElement = createCard(cardData);
  placesList.append(cardElement);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ /"–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
placesList.addEventListener('click', (evt) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
  if (evt.target.classList.contains('card__image')) {
    const card = evt.target.closest('.card');
    const cardTitle = card.querySelector('.card__title');
    
    const cardData = {
      link: evt.target.src,
      name: evt.target.alt || cardTitle.textContent
    };

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ø–∞–ø –¥–∞–Ω–Ω—ã–º–∏
    popupImage.src = cardData.link;
    popupImage.alt = cardData.name;
    popupCaption.textContent = cardData.name;

    openPopup(imagePopup);
  }
});

// –≤–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–º enableValidation
// –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ


enableValidation(validationConfig);


// –ü—Ä–∏–≤–µ—Çü§ç –¢–≤–æ–π —Ç–æ–∫–µ–Ω ca9c73cd-774d-4dee-9109-08215140258b
// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞—à–µ–π –∫–æ–≥–æ—Ä—Ç—ã wff-cohort-41
// return fetch('https://nomoreparties.co/v1/wff-cohort-41/cards', {
//   headers: {
//     authorization: 'ca9c73cd-774d-4dee-9109-08215140258b'
//   }
// })
//   .then(res => res.json())
//   .then((result) => {
//     console.log(result);
//   });


//  return fetch('https://nomoreparties.co/v1/wff-cohort-41/users/me', {
//   headers: {
//     authorization: 'ca9c73cd-774d-4dee-9109-08215140258b'
//   }
// })
//   .then(res => res.json())
//   .then((result) => {
//     console.log(result);
//   });

async function UpdateMe(){
const response = await getMe();

  if (response.ok) { // –µ—Å–ª–∏ HTTP-—Å—Ç–∞—Ç—É—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 200-299
    // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Å–º. –ø—Ä–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–∏–∂–µ)
    let json = await response.json();
  
  profileTitle.innerHTML = json['name'];
  profileDescription.innerHTML =  json['about'];
  profileAvatar.style.backgroundImage=`url(${json[`avatar`]})`;

  } else {
    alert("–û—à–∏–±–∫–∞ HTTP: " + response.status);
  }
}
UpdateMe();


async function checkRequest(){
  const response = await getCards();

    if (response.ok) { // –µ—Å–ª–∏ HTTP-—Å—Ç–∞—Ç—É—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 200-299
    // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Å–º. –ø—Ä–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–∏–∂–µ)
    let json = await response.json();
    console.log(json);
    
  } else {
    alert("–û—à–∏–±–∫–∞ HTTP: " + response.status);
  }
}
//checkRequest();

async function updCards(){
  const response = await getCards();

    if (response.ok) { // –µ—Å–ª–∏ HTTP-—Å—Ç–∞—Ç—É—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 200-299
    // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Å–º. –ø—Ä–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–∏–∂–µ)
    let json = await response.json();
    console.log(json);
    
  } else {
    alert("–û—à–∏–±–∫–∞ HTTP: " + response.status);
  }
}

  updCards()

 })(); 